import Head from 'next/head';
import React, { useRef, useState } from 'react';

const inputStyle = {
  backgroundColor: 'white',
  color: 'black',
};

const handleTelValueChange = (
  e: React.ChangeEvent<HTMLInputElement>,
  setTel: React.Dispatch<React.SetStateAction<string>>
) => {
  const value = e.target.value;
  if (value.match(/[^0-9]+/)) {
    return;
  }
  setTel(value);
};

const exceedMaxLength = (value: string, maxLength: number) => {
  return value.length > maxLength;
};

export default function RefSample() {
  const [telFirst, setTelFirst] = useState<string>('');
  const [telSecond, setTelSecond] = useState<string>('');
  const [telThird, setTelThird] = useState<string>('');

  const secondTelRef = useRef<HTMLInputElement>(null);
  const thirdTelRef = useRef<HTMLInputElement>(null);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <p style={{ color: 'black' }}>携帯番号入力フォーム</p>
        <input
          id="tel-first"
          type="tel"
          style={inputStyle}
          onChange={(e) => {
            const maxLength = 3;
            if (exceedMaxLength(e.target.value, maxLength)) {
              return;
            }
            handleTelValueChange(e, setTelFirst);
            if (e.target.value.length === maxLength) {
              if (secondTelRef.current) {
                secondTelRef.current.focus();
              }
            }
          }}
          value={telFirst}
        />
        <span>-</span>
        <input
          id="tel-second"
          ref={secondTelRef}
          type="tel"
          style={inputStyle}
          onChange={(e) => {
            const maxLength = 4;
            if (exceedMaxLength(e.target.value, maxLength)) {
              return;
            }
            handleTelValueChange(e, setTelSecond);
            if (e.target.value.length === maxLength) {
              if (thirdTelRef.current) {
                thirdTelRef.current.focus();
              }
            }
          }}
          value={telSecond}
        />
        <span>-</span>
        <input
          id="tel-third"
          ref={thirdTelRef}
          type="tel"
          style={inputStyle}
          onChange={(e) => {
            const maxLength = 4;
            if (exceedMaxLength(e.target.value, maxLength)) {
              return;
            }
            handleTelValueChange(e, setTelThird);
          }}
          value={telThird}
        />
      </div>
    </>
  );
}
